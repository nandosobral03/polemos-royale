generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  players   Player[]
  sponsor   Sponsor? @relation(fields: [sponsorId], references: [id])
  sponsorId Int?
}

model Player {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  image           String
  teamId          Int?
  team            Team?             @relation(fields: [teamId], references: [id])
  playedGame      Game[]
  playerDayStatus PlayerDayStatus[]
  attackerOnGame  GameEventLog[]    @relation("GameEventLogAttackers")
  defenderOnGame  GameEventLog[]    @relation("GameEventLogDefenders")
}

model Sponsor {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
  teams     Team[]
}

model MapLocationSchematic {
  id              Int         @id @default(autoincrement())
  image           String
  name            String
  events          GameEvent[]
  usedInLocations MapTile[]
}

model MapHazardSchematic {
  id              Int         @id @default(autoincrement())
  name            String
  events          GameEvent[]
  usedInLocations MapTile[]
}

model MapTile {
  id                Int                  @id @default(autoincrement())
  locationId        Int
  location          MapLocationSchematic @relation(fields: [locationId], references: [id])
  hazards           MapHazardSchematic[]
  gameId            Int
  game              Game                 @relation(fields: [gameId], references: [id])
  q                 Int
  r                 Int
  s                 Int
  playerDayStatuses PlayerDayStatus[]
  GameEventLog      GameEventLog[]
}

model GameEvent {
  id                Int                    @id @default(autoincrement())
  numberOfAttackers Int
  numberOfDefenders Int
  hpChangeAttackers Int
  hpChangeDefenders Int
  description       String
  locations         MapLocationSchematic[]
  hazards           MapHazardSchematic[]
}

model Game {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  tiles      MapTile[]
  players    Player[]
  gameDayLog GameDayLog[]
}

model GameDayLog {
  id             Int               @id @default(autoincrement())
  gameId         Int
  game           Game              @relation(fields: [gameId], references: [id])
  day            Int
  createdAt      DateTime          @default(now())
  playerStatuses PlayerDayStatus[]
  eventLogs      GameEventLog[]

  @@unique([gameId, day])
}

model PlayerDayStatus {
  playerId   Int
  player     Player     @relation(fields: [playerId], references: [id])
  day        Int
  health     Int
  gameId     Int
  tileId     Int
  tile       MapTile    @relation(fields: [tileId], references: [id])
  gameDayLog GameDayLog @relation(fields: [gameId, day], references: [gameId, day])

  @@unique([gameId, playerId, day])
}

model GameEventLog {
  id                        Int        @id @default(autoincrement())
  attackers                 Player[]   @relation("GameEventLogAttackers")
  defenders                 Player[]   @relation("GameEventLogDefenders")
  completedEventDescription String
  tileId                    Int
  tile                      MapTile    @relation(fields: [tileId], references: [id])
  GameDayLog                GameDayLog @relation(fields: [gameDayLogId], references: [id])
  gameDayLogId              Int
}
